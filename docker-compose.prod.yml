version: '3.3'

services:
  web:
    container_name: server_backend
    build:
      context: ./app
      dockerfile: Dockerfile.prod
    command: gunicorn server.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:/home/app/web/staticfiles
      - ./app/mediafiles:/home/app/web/mediafiles
    expose:
      - 8000
    env_file:
      - ./.env.prod
    depends_on:
      - db
  db:
    image: postgres:13.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.prod.db
  nginx-proxy:
    container_name: nginx-proxy
    build: nginx
    restart: always
    ports:
      - 443:443
      - 80:80
    volumes:
      - static_volume:/home/app/web/staticfiles
      - ./app/mediafiles:/home/app/web/mediafiles
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
    depends_on:
      - web
  nginx-proxy-letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    env_file:
      - ./.env.prod.proxy-companion
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - acme:/etc/acme.sh
    depends_on:
      - nginx-proxy

  redis:
    image: "redis:alpine"

  telegram-bot:
    build:
      context: ./app
      dockerfile: Dockerfile.prod
    command: python3 manage.py telegram_bot
    env_file:
      - ./.env.prod
    depends_on:
      - db
      - redis

  celery:
    build:
      context: ./app
      dockerfile: Dockerfile.prod
    command: celery -A server.celery worker --beat --loglevel=info
    env_file:
      - ./.env.prod
    depends_on:
      - db
      - redis


volumes:
  postgres_data:
  static_volume:
  certs:
  html:
  vhost:
  acme:
